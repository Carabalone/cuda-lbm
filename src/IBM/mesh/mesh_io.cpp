#include "IBM/mesh/mesh_io.hpp"

#include <fstream>
#include <sstream>
#include <iostream> 
#include <iomanip>  
#include <filesystem> 

namespace fs = std::filesystem;

namespace mesh {

MeshData load_obj(const std::string& filename) {
    MeshData mesh_data;
    std::ifstream file(filename);

    if (!file.is_open()) {
        std::cerr << "Error: Could not open OBJ file \"" << filename << "\"\n"
                  << "  Current working directory: " << fs::current_path().string() << "\n";
        return mesh_data;
    }

    std::string line_str;
    int line_num = 0;
    while (std::getline(file, line_str)) {
        line_num++;
        std::stringstream ss(line_str);
        std::string keyword;
        ss >> keyword;

        if (keyword == "v") {
            geom::Point3D p;
            if (ss >> p[0] >> p[1] >> p[2]) {
                mesh_data.vertices.push_back(p);
            } else {
                std::cerr << "[Warning] OBJ line " << line_num << ": Could not parse vertex: "
                          << line_str << std::endl;
            }
        } else if (keyword == "f") {
            Face f;
            bool success = true;
            int vertex_count_on_face = 0;

            for (int i = 0; i < 3; ++i) {
                std::string face_val_str;
                if (!(ss >> face_val_str)) {
                    if (vertex_count_on_face < 3) {
                        success = false;
                    }
                    break;
                }
                vertex_count_on_face++;
                
                size_t first_slash = face_val_str.find('/');
                std::string v_idx_str = face_val_str.substr(0, first_slash);

                try {
                    
                    f.v_indices[i] = std::stoi(v_idx_str) - 1;
                } catch (const std::invalid_argument& ia) {
                    std::cerr << "[Warning] OBJ line " << line_num << ": Invalid face vertex index '"
                              << v_idx_str << "' in segment '" << face_val_str << "': " << ia.what() << std::endl;
                    success = false;
                    break;
                } catch (const std::out_of_range& oor) {
                    std::cerr << "[Warning] OBJ line " << line_num << ": Face vertex index out of range '"
                              << v_idx_str << "' in segment '" << face_val_str << "': " << oor.what() << std::endl;
                    success = false;
                    break;
                }
            }

            if (success && vertex_count_on_face >= 3) {
                mesh_data.faces.push_back(f);
            } else if (vertex_count_on_face > 0 && vertex_count_on_face < 3) {
                std::cerr << "[Warning] OBJ line " << line_num << ": Face has < 3 vertices: "
                          << line_str << std::endl;
            }
        }
    }
    file.close();

    if (!mesh_data.vertices.empty()) {
        std::cout << "[INFO] Loaded " << mesh_data.vertices.size() << " vertices";
        if (!mesh_data.faces.empty()) {
            std::cout << " and " << mesh_data.faces.size() << " faces";
        }
        std::cout << " from OBJ file: " << filename << std::endl;
    } else {
        std::cout << "[INFO] Loaded 0 vertices from OBJ file: " << filename << std::endl;
    }
    return mesh_data;
}

void save_obj(const MeshData& mesh, const std::string& filename) {
    std::ofstream outfile(filename);
    if (!outfile.is_open()) {
        std::cerr << "Error: Could not open OBJ file " << filename << " for writing." << std::endl;
        return;
    }

    outfile << std::fixed << std::setprecision(6);

    outfile << "# OBJ file generated by LBM-IBM utility\n";
    outfile << "# Vertices: " << mesh.vertices.size() << "\n";
    if (!mesh.faces.empty()) {
        outfile << "# Faces: " << mesh.faces.size() << "\n";
    }
    outfile << "\n";

    for (const auto& v : mesh.vertices) {
        outfile << "v " << v.x() << " " << v.y() << " " << v.z() << "\n";
    }

    outfile << "\n";

    if (!mesh.faces.empty()) {
        for (const auto& f : mesh.faces) {
            outfile << "f " << (f.v_indices[0] + 1)
                    << " " << (f.v_indices[1] + 1)
                    << " " << (f.v_indices[2] + 1) << "\n";
        }
    }

    outfile.close();
    std::cout << "[INFO] Saved mesh with " << mesh.vertices.size() << " vertices";
    if (!mesh.faces.empty()) {
        std::cout << " and " << mesh.faces.size() << " faces";
    }
    std::cout << " to " << filename << std::endl;
}

} // namespace mesh
