// SymPy-Generated CUDA code for central moment matrix inverse
__device__ __forceinline__ static
void cm_matrix_inverse(float* M_inv, float ux, float uy) {
    // Priority subexpressions
    float ux2 = ux*ux;
    float uy2 = uy*uy;
    float uxuy = ux*uy;
    float ux3 = ux*ux*ux;
    float uy3 = uy*uy*uy;
    float ux2uy = uy*(ux*ux);
    float uxuy2 = ux*(uy*uy);
    float ux2uy2 = (ux*ux)*(uy*uy);

    // Additional common subexpressions
    float x3 = -uxuy2;
    float x4 = ux + x3;
    float x5 = -uy;
    float x6 = ux2uy + x5;

    // Matrix elements
    M_inv[0 * 9 + 0] = -ux2 + ux2uy2 - uy2 + 1.0f;
    M_inv[0 * 9 + 1] = -2.0f*ux + 2.0f*uxuy2;
    M_inv[0 * 9 + 2] = 2.0f*ux2uy + 2.0f*x5;
    M_inv[0 * 9 + 3] = 0.5f*ux2 + 0.5f*uy2 - 1.0f;
    M_inv[0 * 9 + 4] = -0.5f*ux2 + 0.5f*uy2;
    M_inv[0 * 9 + 5] = 4.0f*uxuy;
    M_inv[0 * 9 + 6] = 2.0f*uy;
    M_inv[0 * 9 + 7] = 2.0f*ux;
    M_inv[0 * 9 + 8] = 1.0f;

    M_inv[1 * 9 + 0] = 0.5f*ux + 0.5f*ux2 - 0.5f*ux2uy2 + 0.5f*x3;
    M_inv[1 * 9 + 1] = ux - 0.5f*uy2 + x3 + 0.5f;
    M_inv[1 * 9 + 2] = -ux2uy - uxuy;
    M_inv[1 * 9 + 3] = -0.25f*ux - 0.25f*ux2 - 0.25f*uy2 + 0.25f;
    M_inv[1 * 9 + 4] = 0.25f*ux + 0.25f*ux2 - 0.25f*uy2 + 0.25f;
    M_inv[1 * 9 + 5] = -2.0f*uxuy + x5;
    M_inv[1 * 9 + 6] = x5;
    M_inv[1 * 9 + 7] = -ux - 0.5f;
    M_inv[1 * 9 + 8] = -0.5f;

    M_inv[2 * 9 + 0] = -0.5f*ux2uy - 0.5f*ux2uy2 + 0.5f*uy + 0.5f*uy2;
    M_inv[2 * 9 + 1] = -uxuy + x3;
    M_inv[2 * 9 + 2] = -0.5f*ux2 - ux2uy + uy + 0.5f;
    M_inv[2 * 9 + 3] = -0.25f*ux2 - 0.25f*uy2 + 0.25f*x5 + 0.25f;
    M_inv[2 * 9 + 4] = 0.25f*ux2 - 0.25f*uy2 + 0.25f*x5 - 0.25f;
    M_inv[2 * 9 + 5] = -ux - 2.0f*uxuy;
    M_inv[2 * 9 + 6] = x5 - 0.5f;
    M_inv[2 * 9 + 7] = -ux;
    M_inv[2 * 9 + 8] = -0.5f;

    M_inv[3 * 9 + 0] = -0.5f*ux + 0.5f*ux2 - 0.5f*ux2uy2 + 0.5f*uxuy2;
    M_inv[3 * 9 + 1] = ux + 0.5f*uy2 + x3 - 0.5f;
    M_inv[3 * 9 + 2] = -ux2uy + uxuy;
    M_inv[3 * 9 + 3] = 0.25f*ux - 0.25f*ux2 - 0.25f*uy2 + 0.25f;
    M_inv[3 * 9 + 4] = -0.25f*ux + 0.25f*ux2 - 0.25f*uy2 + 0.25f;
    M_inv[3 * 9 + 5] = -2.0f*uxuy + uy;
    M_inv[3 * 9 + 6] = x5;
    M_inv[3 * 9 + 7] = 0.5f - ux;
    M_inv[3 * 9 + 8] = -0.5f;

    M_inv[4 * 9 + 0] = 0.5f*ux2uy - 0.5f*ux2uy2 + 0.5f*uy2 + 0.5f*x5;
    M_inv[4 * 9 + 1] = uxuy + x3;
    M_inv[4 * 9 + 2] = 0.5f*ux2 - ux2uy + uy - 0.5f;
    M_inv[4 * 9 + 3] = -0.25f*ux2 + 0.25f*uy - 0.25f*uy2 + 0.25f;
    M_inv[4 * 9 + 4] = 0.25f*ux2 + 0.25f*uy - 0.25f*uy2 - 0.25f;
    M_inv[4 * 9 + 5] = ux - 2.0f*uxuy;
    M_inv[4 * 9 + 6] = x5 + 0.5f;
    M_inv[4 * 9 + 7] = -ux;
    M_inv[4 * 9 + 8] = -0.5f;

    M_inv[5 * 9 + 0] = 0.25f*ux2uy + 0.25f*ux2uy2 + 0.25f*uxuy + 0.25f*uxuy2;
    M_inv[5 * 9 + 1] = 0.5f*uxuy + 0.5f*uxuy2 + 0.25f*uy + 0.25f*uy2;
    M_inv[5 * 9 + 2] = 0.25f*ux + 0.25f*ux2 + 0.5f*ux2uy + 0.5f*uxuy;
    M_inv[5 * 9 + 3] = 0.125f*ux + 0.125f*ux2 + 0.125f*uy + 0.125f*uy2;
    M_inv[5 * 9 + 4] = -0.125f*ux - 0.125f*ux2 + 0.125f*uy + 0.125f*uy2;
    M_inv[5 * 9 + 5] = 0.5f*ux + uxuy + 0.5f*uy + 0.25f;
    M_inv[5 * 9 + 6] = 0.5f*uy + 0.25f;
    M_inv[5 * 9 + 7] = 0.5f*ux + 0.25f;
    M_inv[5 * 9 + 8] = 0.25f;

    M_inv[6 * 9 + 0] = 0.25f*ux2uy + 0.25f*ux2uy2 - 0.25f*uxuy + 0.25f*x3;
    M_inv[6 * 9 + 1] = 0.5f*uxuy + 0.5f*uxuy2 - 0.25f*uy2 + 0.25f*x5;
    M_inv[6 * 9 + 2] = -0.25f*ux + 0.25f*ux2 + 0.5f*ux2uy - 0.5f*uxuy;
    M_inv[6 * 9 + 3] = -0.125f*ux + 0.125f*ux2 + 0.125f*uy + 0.125f*uy2;
    M_inv[6 * 9 + 4] = 0.125f*ux - 0.125f*ux2 + 0.125f*uy + 0.125f*uy2;
    M_inv[6 * 9 + 5] = 0.5f*ux + uxuy + 0.5f*x5 - 0.25f;
    M_inv[6 * 9 + 6] = 0.5f*uy + 0.25f;
    M_inv[6 * 9 + 7] = 0.5f*ux - 0.25f;
    M_inv[6 * 9 + 8] = 0.25f;

    M_inv[7 * 9 + 0] = -0.25f*ux2uy + 0.25f*ux2uy2 + 0.25f*uxuy + 0.25f*x3;
    M_inv[7 * 9 + 1] = -0.5f*uxuy + 0.5f*uxuy2 + 0.25f*uy - 0.25f*uy2;
    M_inv[7 * 9 + 2] = 0.25f*ux - 0.25f*ux2 + 0.5f*ux2uy - 0.5f*uxuy;
    M_inv[7 * 9 + 3] = -0.125f*ux + 0.125f*ux2 + 0.125f*uy2 + 0.125f*x5;
    M_inv[7 * 9 + 4] = 0.125f*ux - 0.125f*ux2 + 0.125f*uy2 + 0.125f*x5;
    M_inv[7 * 9 + 5] = -0.5f*ux + uxuy + 0.5f*x5 + 0.25f;
    M_inv[7 * 9 + 6] = 0.5f*uy - 0.25f;
    M_inv[7 * 9 + 7] = 0.5f*ux - 0.25f;
    M_inv[7 * 9 + 8] = 0.25f;

    M_inv[8 * 9 + 0] = -0.25f*ux2uy + 0.25f*ux2uy2 - 0.25f*uxuy + 0.25f*uxuy2;
    M_inv[8 * 9 + 1] = -0.5f*uxuy + 0.5f*uxuy2 + 0.25f*uy2 + 0.25f*x5;
    M_inv[8 * 9 + 2] = -0.25f*ux - 0.25f*ux2 + 0.5f*ux2uy + 0.5f*uxuy;
    M_inv[8 * 9 + 3] = 0.125f*ux + 0.125f*ux2 + 0.125f*uy2 + 0.125f*x5;
    M_inv[8 * 9 + 4] = -0.125f*ux - 0.125f*ux2 + 0.125f*uy2 + 0.125f*x5;
    M_inv[8 * 9 + 5] = -0.5f*ux + uxuy + 0.5f*uy - 0.25f;
    M_inv[8 * 9 + 6] = 0.5f*uy - 0.25f;
    M_inv[8 * 9 + 7] = 0.5f*ux + 0.25f;
    M_inv[8 * 9 + 8] = 0.25f;

}
