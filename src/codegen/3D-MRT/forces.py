import sympy as sp
from sympy import symbols, Matrix, Rational
from util import custom_cse, custom_cse_ccode

fx, fy, fz, ux, uy, uz = symbols('fx fy fz ux uy uz')

cs_sq = Rational(1, 3)
cs_4th = Rational(1, 9)

weights = [
    Rational(8, 27),
    *[Rational(2, 27) for _ in range(6)],
    *[Rational(1, 54) for _ in range(12)],
    *[Rational(1, 216) for _ in range(8)]
]

h_C = [
    0, 0, 0, 
    1, 0, 0,    
    -1, 0, 0,   
    0, 1, 0,    
    0, -1, 0,   
    0, 0, 1,    
    0, 0, -1,   
    1, 1, 0,    
    -1, 1, 0,   
    1, -1, 0,   
    -1, -1, 0,  
    1, 0, 1,    
    -1, 0, 1,   
    1, 0, -1,   
    -1, 0, -1,  
    0, 1, 1,    
    0, -1, 1,   
    0, 1, -1,   
    0, -1, -1,  
    1, 1, 1,    
    -1, 1, 1,   
    1, -1, 1,   
    -1, -1, 1,  
    1, 1, -1,   
    -1, 1, -1,  
    1, -1, -1,  
    -1, -1, -1  
]

M = Matrix(27, 27, [
 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
 1,  0, -1,  0,  0,  0,  1, -1, -1,  1,  1,  0, -1,  0,  1,  0, -1,  0,  1, -1, -1,  1,  1, -1, -1,  1,  0,
 0,  1,  0, -1,  0,  0,  1,  1, -1, -1,  0,  1,  0, -1,  0,  1,  0, -1,  1,  1, -1, -1,  1,  1, -1, -1,  0,
 0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  1,  1,  1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1,  0,
-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, -2,
 2, -1,  2, -1, -1, -1,  1,  1,  1,  1,  1, -2,  1, -2,  1, -2,  1, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 0,  1,  0,  1, -1, -1,  1,  1,  1,  1, -1,  0, -1,  0, -1,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  0,  0,  0,  0,  1, -1,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1,  1, -1,  1, -1,  1, -1,  0,
 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0, -1,  0, -1,  0,  1,  1,  1, -1, -1, -1, -1,  1,  1,  0,
 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0, -1,  0, -1,  0,  1,  0,  1, -1, -1,  1, -1,  1,  1, -1,  0,
-4,  0,  4,  0,  0,  0, -1,  1,  1, -1, -1,  0,  1,  0, -1,  0,  1,  0,  2, -2, -2,  2,  2, -2, -2,  2,  0,
 0, -4,  0,  4,  0,  0, -1, -1,  1,  1,  0, -1,  0,  1,  0, -1,  0,  1,  2,  2, -2, -2,  2,  2, -2, -2,  0,
 0,  0,  0,  0, -4,  4,  0,  0,  0,  0, -1, -1, -1, -1,  1,  1,  1,  1,  2,  2,  2,  2, -2, -2, -2, -2,  0,
 4,  0, -4,  0,  0,  0, -2,  2,  2, -2, -2,  0,  2,  0, -2,  0,  2,  0,  1, -1, -1,  1,  1, -1, -1,  1,  0,
 0,  4,  0, -4,  0,  0, -2, -2,  2,  2,  0, -2,  0,  2,  0, -2,  0,  2,  1,  1, -1, -1,  1,  1, -1, -1,  0,
 0,  0,  0,  0,  4, -4,  0,  0,  0,  0, -2, -2, -2, -2,  2,  2,  2,  2,  1,  1,  1,  1, -1, -1, -1, -1,  0,
 0,  0,  0,  0,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  4,
 4,  4,  4,  4,  4,  4, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,  1,  1,  1,  1,  1,  1,  1,  1, -8,
-4,  2, -4,  2,  2,  2,  1,  1,  1,  1,  1, -2,  1, -2,  1, -2,  1, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 0, -2,  0, -2,  2,  2,  1,  1,  1,  1, -1,  0, -1,  0, -1,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  0,  0,  0,  0, -2,  2, -2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1,  1, -1,  1, -1,  1, -1,  0,
 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  0,  2,  0,  2,  0, -2,  1,  1, -1, -1, -1, -1,  1,  1,  0,
 0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  0,  2,  0,  2,  0, -2,  0,  1, -1, -1,  1, -1,  1,  1, -1,  0,
 0,  0,  0,  0,  0,  0,  1, -1, -1,  1, -1,  0,  1,  0, -1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  0,  0,  0,  0, -1, -1,  1,  1,  0,  1,  0, -1,  0,  1,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1,  1, -1, -1,  1, -1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1,  1, -1, -1,  1, -1,  1,  0
])

c = []
for i in range(27):
    cx, cy, cz = h_C[3*i], h_C[3*i+1], h_C[3*i+2]
    c.append(Matrix([cx, cy, cz]))

u = Matrix([ux, uy, uz])
f = Matrix([fx, fy, fz])

G = []
for i in range(27):
    ci = c[i]
    wi = weights[i]
    
    term1 = 3 * (ci - u)            # 3*(c_i - u)
    term2 = 9 * (ci.dot(u)) * ci    # 9*(c_i Â· u) * c_i
    total = term1 + term2
    Gi = wi * total.dot(f)
    
    G.append(Gi)

forcing_term = M * Matrix(G)

simpl_expr = sp.simplify(forcing_term)

c_code = custom_cse_ccode(simpl_expr, min_usage=4)
print(c_code)
